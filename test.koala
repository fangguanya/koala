//this is a comment\n

/*
this is a multi-line-comment
*/

//数组成员为基本类型
a[0];
a[1][2];
a[1+2][3+a];

//数组成员为STRUCT
a[0].name;
a[0].send_hello();

//数组成员为FUNC
a[0]();

//函数
send_request().wait();    //返回值为INTERFACE或STRUCT
send_request(data)(1000); //返回值为FUNC
send_request()[0];        //返回值为数组

//STRUCT
this.name;
this.call();
this.array[0];
p.name;
p.call();
p.array[0]();

//基本类型
"hello, world";
123;
123.456;
null;
true;
false;

//基本类型访问
123.to_float();   //访问方法
"string".length;  //访问属性
1.to_bool();      //访问方法
//1[2];             //数组访问, 无语义
//"hello"[2];       //数组访问, 无语义

//表达式运算
1+2-3*4/2%4;

1<<2<<3;
1>>2>>3;
1<<2>>3;
2>>1<<4;

1 & 2 & 3 | 4 & 5 | 6 ^ 7 ^ 8;
123 | 345;
123 ^ 234;

true && true;
false || true;
!true;
!false;
1 > 2 && 3 > 3;
1 || 2;
1 != 2;
1 == 2;

1<2 <<1;


a[a + b * 2][2].hello();

aa.bb[0].cc.dd().f();
bb[0].cc.dd().f();

1+3*4<<6+(-6-9);
+++a++++-100;

array[10];
array[2][10] + 123;
1+2<<2;
funca () + 10;
add(sub(100, 200));
add(sub(100, 200))[10];
p.a.b.c();
f(arr[0]+1-2*3|4, f(), a);
p.a();
10.itos();
"hello, world".to_upper();
arry[funb()];
f1().f2().f3();
f()()();
//10[2];      //常量不允许数组操作
//"string"[2];
"string".length;
~123;
~(a + b);

a = 100;
a = arr[0];
a = fu();
a = 1*2^3;
a++;
//a++ = 3;  //赋值语句不允许其他操作
a += 1;
a -= 1;
a *= 1;
a %= a+2;
a &= b;
a = a & b;
a |= b;
a = a | b;

//变量列表
a, b = 1, 2;
//a, b += 1, 2; //变量列表不允许 +=
a, b = array[0](), b + 2 *3 > 3;

//括号
(a + b - c);
(a[0]).name;  //数组
//a.();
//a.[]; //.只能方法成员
((f()) + 2) * 3;  //函数
(a).b;  //对象
(this).a;
this;
//this(); 无构造方法
(this.a + 2);
a[0] = 10;
a[0].b = "abc";
a[0], a[1] = 1, 2;
f().a = 1;
//f() = 1;
f()[0] = 1;
a.b.c.d, a = 1, 2;

//a = Person{};
a = null;
a = null + 3;
a = "string";
a = 123;
a = true;
a = false;
a = 123.045;

//STRUCT初始化
{};
{1,3,4};
{a:1};
{a:1,b:3};
{a:Person{1,2}, b : 3};
{1,{1,2}, {1,2,{3}}, 4};
Person{};
Person{1,3,4};
Person{a:1};
Person{a:1,b:3};
Person{a:Person{1,2}, b : 3};
Person{1,{1,2}, {1,2,{3}}, 4};

int32{12345};
string{"hello"};
bool{true};

a = Person{1,{1,2}, {1,2,{3}}, 4, a + 3};

//类型定义
/*
type Person struct {
  //不能为空
}
*/
type Name struct {
  FirstName string;
  FamilyName string;
}

type Person struct {
  name Name;
  age int32;
}

type UINT32 uint32;
type Person2 system.Person; //再定义

type say interface {
  func sayHello(message string);
  func replyHello() string;
}

type NewSay say;

type say_prototype func(string, Person) string;

//func sayError(string, Person); //不允许函数原型声明

a = func(msg string, to Person) string {

}

//数组初始化
//接口初始化
//匿名函数
//类型：內建类型，type定义类型
//unicode
